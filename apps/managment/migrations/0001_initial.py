# Generated by Django 5.1.6 on 2025-02-24 13:08

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Farmer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farmer_id', models.CharField(help_text='Unique ID assigned to the farmer', max_length=100, unique=True)),
                ('name', models.CharField(help_text='Full name of the farmer', max_length=255)),
                ('contact_number', models.CharField(blank=True, help_text='Primary contact number of the farmer', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address of the farmer', max_length=255, null=True)),
                ('address', models.TextField(help_text='Physical address of the farmer')),
                ('farm_name', models.CharField(blank=True, help_text='Name of the farm', max_length=255, null=True)),
                ('farm_location', models.CharField(help_text='Geographical location of the farm', max_length=255)),
                ('total_land_area', models.DecimalField(blank=True, decimal_places=2, help_text='Total area of the farm in hectares', max_digits=10, null=True)),
                ('certifications', models.TextField(blank=True, help_text='List of certifications held by the farmer', null=True)),
                ('compliance_standards', models.TextField(blank=True, help_text='Compliance standards followed by the farmer', null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes or comments about the farmer', null=True)),
                ('registration_date', models.DateField(blank=True, help_text='Date of Registration', null=True)),
            ],
            options={
                'verbose_name': 'Farmer',
                'verbose_name_plural': 'Farmers',
            },
        ),
        migrations.CreateModel(
            name='Warehouse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the warehouse', max_length=255)),
                ('type', models.CharField(choices=[('General', 'General'), ('Cold Storage', 'Cold Storage'), ('Bonded', 'Bonded'), ('Automated', 'Automated')], default='General', help_text='Type of warehouse', max_length=100)),
                ('location', models.CharField(help_text='Geographical location of the warehouse', max_length=255)),
                ('total_capacity', models.DecimalField(decimal_places=2, help_text='Total storage capacity in square meters', max_digits=10)),
                ('available_space', models.DecimalField(decimal_places=2, help_text='Available storage space in square meters', max_digits=10)),
                ('utilization_rate', models.DecimalField(decimal_places=2, help_text='Percentage of utilized space (0-100)', max_digits=5)),
                ('zone_layout', models.TextField(blank=True, help_text='Description or diagram of the warehouse zone layout', null=True)),
                ('slug', models.SlugField(blank=True, help_text='Unique slug for the warehouse URL', unique=True)),
                ('ownership', models.ForeignKey(help_text='Owner of the warehouse', on_delete=django.db.models.deletion.CASCADE, related_name='owned_warehouses', to=settings.AUTH_USER_MODEL)),
                ('users', models.ManyToManyField(blank=True, help_text='Users associated with this warehouse', null=True, related_name='warehouses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Warehouse',
                'verbose_name_plural': 'Warehouses',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sku', models.CharField(db_index=True, help_text='Stock Keeping Unit', max_length=50, unique=True)),
                ('product_name', models.CharField(choices=[('Tomato', 'Tomato'), ('Mango', 'Mango'), ('Watermelon', 'Watermelon'), ('Orange', 'Orange'), ('Lemon', 'Lemon'), ('Lime', 'Lime'), ('Papaya', 'Papaya'), ('Banana', 'Banana'), ('Saba Senegalensis-Madd', 'Saba Senegalensis-Madd'), ('Carrot', 'Carrot'), ('Onion', 'Onion'), ('Potato', 'Potato'), ('Sweet Potato', 'Sweet Potato'), ('Cabbage', 'Cabbage'), ('Garlic', 'Garlic'), ('Chili Pepper', 'Chili Pepper'), ('Bell Pepper', 'Bell Pepper'), ('Millet', 'Millet'), ('Sorghum', 'Sorghum'), ('Fonio', 'Fonio'), ('Rice', 'Rice'), ('Corn', 'Corn'), ('Cassava', 'Cassava'), ('Yam', 'Yam')], db_index=True, help_text='Name of the product', max_length=255)),
                ('origin', models.CharField(help_text='Country or region of origin', max_length=255)),
                ('lot_number', models.CharField(help_text='Lot number for batch identification', max_length=100)),
                ('harvest_date', models.DateField(blank=True, help_text='Date of harvest', null=True)),
                ('entry_date', models.DateField(db_index=True, default=django.utils.timezone.now, help_text='Date when the product entered the warehouse')),
                ('manufacturing_date', models.DateField(blank=True, help_text='Date of manufacturing', null=True)),
                ('expiration_date', models.DateField(blank=True, db_index=True, help_text='Date when the product expires', null=True)),
                ('exit_date', models.DateField(blank=True, help_text='Date when the product exits the warehouse', null=True)),
                ('supplier_code', models.CharField(help_text='Code assigned to the supplier', max_length=100)),
                ('product_type', models.CharField(choices=[('Fruits', 'Fruits'), ('Vegetables', 'Vegetables'), ('Grains', 'Grains'), ('Dairy', 'Dairy'), ('Meat', 'Meat'), ('Processed', 'Processed')], default='Fruits', help_text='Type of product', max_length=100)),
                ('variety_or_species', models.CharField(help_text='Variety or species of the product', max_length=255)),
                ('weight_quantity', models.DecimalField(decimal_places=2, help_text='Weight or quantity of the product (in default units)', max_digits=10)),
                ('weight_quantity_kg', models.DecimalField(blank=True, decimal_places=2, help_text='Weight of the product in kilograms', max_digits=10, null=True)),
                ('quantity_in_stock', models.PositiveIntegerField(help_text='Quantity available in stock')),
                ('packaging_condition', models.CharField(help_text='Condition of the packaging', max_length=255)),
                ('status', models.CharField(choices=[('In Stock', 'In Stock'), ('Out of Stock', 'Out of Stock'), ('Expired', 'Expired')], default='In Stock', help_text='Current status of the product', max_length=100)),
                ('quality_standards', models.TextField(blank=True, help_text='Quality standards met by the product', null=True)),
                ('humidity_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Humidity rate in percentage', max_digits=5, null=True)),
                ('storage_temperature', models.DecimalField(blank=True, decimal_places=2, help_text='Storage temperature in degrees Celsius', max_digits=5, null=True)),
                ('co2', models.DecimalField(blank=True, decimal_places=2, help_text='CO₂ concentration in percentage', max_digits=5, null=True)),
                ('o2', models.DecimalField(blank=True, decimal_places=2, help_text='O₂ concentration in percentage', max_digits=5, null=True)),
                ('n2', models.DecimalField(blank=True, decimal_places=2, help_text='N₂ concentration in percentage', max_digits=5, null=True)),
                ('ethylene_management', models.CharField(blank=True, help_text='Ethylene management strategy', max_length=255, null=True)),
                ('unit_price', models.DecimalField(decimal_places=2, help_text='Price per unit of the product', max_digits=10)),
                ('total_value', models.DecimalField(decimal_places=2, help_text='Total value of the product in stock', max_digits=15)),
                ('nutritional_info', models.TextField(blank=True, help_text='Nutritional information about the product', null=True)),
                ('regulatory_codes', models.CharField(blank=True, help_text='Regulatory codes applicable to the product', max_length=255, null=True)),
                ('notes_comments', models.TextField(blank=True, help_text='Additional notes or comments about the product', null=True)),
                ('farmer', models.ForeignKey(blank=True, help_text='Farmer who supplied the product', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='managment.farmer')),
                ('warehouse', models.ForeignKey(blank=True, help_text='Warehouse where the product is stored', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='managment.warehouse')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
        ),
    ]
